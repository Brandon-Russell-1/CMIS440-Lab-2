package russell_cmis440_lab2;


/**
* Program Name:
* @author Brandon R Russell
* @Course CMIS440
* Date:
* Program Requirements:
* Program Design:
* Things you what me to know before I grade your work:
*/

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import java.awt.Cursor;
import java.awt.datatransfer.*;
import java.awt.Toolkit;
import java.io.IOException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;

/** What is this?*
*|----------------------------------------------------------------------------|
*|                                CRC:                                        |
*|----------------------------------------------------------------------------|
*|What it is*                            What class uses this*                |
*|----------------------------------------------------------------------------|
*/



        
public class LabMainWindow extends javax.swing.JFrame 
        implements PropertyChangeListener{

    /** Creates new form LabMainWindow */
    public LabMainWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clientPanel = new javax.swing.JPanel();
        lblConnectTo = new javax.swing.JLabel();
        txtClientIpAddress = new javax.swing.JTextField();
        lblClientIpAddress = new javax.swing.JLabel();
        txtClientPort = new javax.swing.JTextField();
        lblClientPort = new javax.swing.JLabel();
        myFileChooser = new javax.swing.JFileChooser();
        lblChooseFiles = new javax.swing.JLabel();
        btnClientStart = new javax.swing.JButton();
        btnClientCancel = new javax.swing.JButton();
        clientProgressBar = new javax.swing.JProgressBar();
        serverPanel = new javax.swing.JPanel();
        lblServerPort = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        lblServerIpAddress = new javax.swing.JLabel();
        txtServerIpAddress = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtServerOutput = new javax.swing.JTextArea();
        lblServerOutput = new javax.swing.JLabel();
        btnServerStart = new javax.swing.JButton();
        btnServerStop = new javax.swing.JButton();
        myMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        startClientMenuItem = new javax.swing.JMenuItem();
        startServerMenuItem = new javax.swing.JMenuItem();
        stopClientMenuItem = new javax.swing.JMenuItem();
        stopServerMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        copyOutputMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        instructionsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(javax.swing.UIManager.getDefaults().getColor("Nb.Desktop.background"));

        clientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Client:"));

        lblConnectTo.setText("Connect to:");

        txtClientIpAddress.setText("127.0.0.1");

        lblClientIpAddress.setText("IP Address");

        txtClientPort.setText("5000");

        lblClientPort.setText("Port");

        myFileChooser.setControlButtonsAreShown(false);
        myFileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
        myFileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        myFileChooser.setMultiSelectionEnabled(true);

        lblChooseFiles.setText("Choose the files to process:");

        btnClientStart.setText("Start");
        btnClientStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientStartActionPerformed(evt);
            }
        });

        btnClientCancel.setText("Cancel");
        btnClientCancel.setEnabled(false);

        clientProgressBar.setStringPainted(true);

        javax.swing.GroupLayout clientPanelLayout = new javax.swing.GroupLayout(clientPanel);
        clientPanel.setLayout(clientPanelLayout);
        clientPanelLayout.setHorizontalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientPanelLayout.createSequentialGroup()
                        .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(clientPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblConnectTo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtClientIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblClientIpAddress)
                                .addGap(39, 39, 39)))
                        .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(clientPanelLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(lblClientPort))
                            .addGroup(clientPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(clientPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblChooseFiles))
                    .addComponent(myFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addGroup(clientPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnClientStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClientCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        clientPanelLayout.setVerticalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblConnectTo)
                        .addComponent(txtClientIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(clientPanelLayout.createSequentialGroup()
                        .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblClientPort)
                            .addComponent(lblClientIpAddress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtClientPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(lblChooseFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(myFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnClientStart)
                        .addComponent(btnClientCancel))
                    .addComponent(clientProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        serverPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Server:"));

        lblServerPort.setText("Listen on Port:");

        txtServerPort.setText("5000");

        lblServerIpAddress.setText("Current IP Address:");

        txtServerIpAddress.setEditable(false);

        txtServerOutput.setColumns(20);
        txtServerOutput.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtServerOutput.setRows(5);
        jScrollPane1.setViewportView(txtServerOutput);

        lblServerOutput.setText("Output:");

        btnServerStart.setText("Start Listening");
        btnServerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServerStartActionPerformed(evt);
            }
        });

        btnServerStop.setText("Stop Listening");
        btnServerStop.setEnabled(false);

        javax.swing.GroupLayout serverPanelLayout = new javax.swing.GroupLayout(serverPanel);
        serverPanel.setLayout(serverPanelLayout);
        serverPanelLayout.setHorizontalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverPanelLayout.createSequentialGroup()
                        .addComponent(lblServerPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblServerIpAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtServerIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(lblServerOutput)
                    .addComponent(btnServerStart)
                    .addComponent(btnServerStop))
                .addContainerGap())
        );
        serverPanelLayout.setVerticalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServerPort)
                    .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblServerIpAddress)
                    .addComponent(txtServerIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(lblServerOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnServerStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnServerStop)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        startClientMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        startClientMenuItem.setText("Start Client");
        fileMenu.add(startClientMenuItem);

        startServerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        startServerMenuItem.setText("Start Server");
        fileMenu.add(startServerMenuItem);

        stopClientMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        stopClientMenuItem.setText("Stop Client");
        stopClientMenuItem.setEnabled(false);
        fileMenu.add(stopClientMenuItem);

        stopServerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        stopServerMenuItem.setText("Stop Server");
        stopServerMenuItem.setEnabled(false);
        fileMenu.add(stopServerMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        fileMenu.add(exitMenuItem);

        myMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        copyOutputMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyOutputMenuItem.setText("Copy Output");
        editMenu.add(copyOutputMenuItem);

        myMenuBar.add(editMenu);

        helpMenu.setText("Help");

        instructionsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        instructionsMenuItem.setText("Instructions");
        helpMenu.add(instructionsMenuItem);

        myMenuBar.add(helpMenu);

        setJMenuBar(myMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(clientPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(serverPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClientStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientStartActionPerformed
        startProcessingFiles();
    }//GEN-LAST:event_btnClientStartActionPerformed

    private void btnServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServerStartActionPerformed
        startServerListening();
    }//GEN-LAST:event_btnServerStartActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new LabMainWindow().setVisible(true);
            }
        });
    }

    /** Creates ThreadControl object to begin file processing.
    * This method disables the Start button, Start Menu Item, turns the cursor
    * into a working icon, gets the case sensitive check and also the delimiter,
    * and then creates a ThreadControl object and executes it on a new
    * SwingWorker worker thread so as not to freeze the GUI during processing.
    * @TheCs Cohesion - Creates ThreadControl object to begin file processing.
    * Completeness - Completely creates ThreadControl object to begin
    *                file processing.
    * Convenience - Simply creates ThreadControl object to begin file processing
    * Clarity - It is simple to understand that this creates ThreadControl
    *           object to begin file processing.
    * Consistency - It uses the same syntax rules as the rest of the class and
    *               continues to use proper casing and indentation.
    * @precondition Must have at least one text file selected for processing.
    * @throws exception if at least one file is not chosen.
    * @exception General exception capture
    */
    private void startProcessingFiles(){
        try{
            txtServerOutput.setText("");
            String tempIpAddressHolder = txtClientIpAddress.getText();
            int tempPortHolder = Integer.parseInt(txtClientPort.getText());
            setClientControlsToWait();
            if (myFileChooser.getSelectedFiles().length <= 0){
                throw new Exception("Must select atleast one file");
            }

            String[] selectedFileNames =
                    new String[myFileChooser.getSelectedFiles().length];
            int counter = 0;
            for (File element: myFileChooser.getSelectedFiles()){
                selectedFileNames[counter] = element.toString();
                counter++;
            }
            DfcClient myDfcClient = new DfcClient(selectedFileNames, tempIpAddressHolder, tempPortHolder);
            myDfcClient.addPropertyChangeListener(this);
            myDfcClient.execute(); //Begin Worker Thread

        }catch (NumberFormatException exception) {
            setClientControlsToActive();
            JOptionPane.showMessageDialog(null,exception.getMessage(),
                    "Exception Thrown on Start Process",
                    JOptionPane.ERROR_MESSAGE);
        }catch (Exception exception) {
            setClientControlsToActive();
            JOptionPane.showMessageDialog(null,exception.getMessage(),
                    "Exception Thrown on Start Process",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void startServerListening(){
        try{
            setServerControlsToWait();
            txtServerOutput.setText("Waiting for Data...\n");
            int tempPortHolder = Integer.parseInt(txtServerPort.getText());
            DfcServer myDfcServer = new DfcServer(tempPortHolder, txtServerOutput);
            myDfcServer.addPropertyChangeListener(this);
            myDfcServer.execute(); //Begin Worker Thread
        }catch (NumberFormatException exception){
            setServerControlsToActive();
            JOptionPane.showMessageDialog(null,exception.getMessage(),
                    "Exception Thrown on Start Process",
                    JOptionPane.ERROR_MESSAGE);
        }catch (Exception exception){
            setServerControlsToActive();
            JOptionPane.showMessageDialog(null,exception.getMessage(),
                    "Exception Thrown on Start Process",
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }

    /** Detects progress of file processing from ThreadControl object.
    * Basically this will determine if the setProgress has been called from
    * the ThreadControl object and will increment the progress bar if so.
    * Will also determine if ThreadControl is done, and if so will call
    * displayOutputFile.
    * @TheCs Cohesion - Detects progress of file processing from ThreadControl
    *                   object.
    * Completeness - Completely detects progress of file processing from
    *                ThreadControl object.
    * Convenience - Simply detects progress of file processing from
    *               ThreadControl object.
    * Clarity - It is simple to understand that this detects progress of file
    *           processing from ThreadControl object.
    * Consistency - It uses the same syntax rules as the rest of the class and
    *               continues to use proper casing and indentation.
    * @param PropertyChangeEvent Determine progress of ThreadControl
    */
    public void propertyChange(PropertyChangeEvent evt){
        if ("progress".equals(evt.getPropertyName())){
            int progress = (Integer) evt.getNewValue();
            clientProgressBar.setValue(progress);
            if (progress == 95){
                setClientControlsToActive();
                clientProgressBar.setValue(100);
            }
        }
    }

    /** Disables Start Menu, Start Button,and sets cursor to wait icon.
    * @TheCs Cohesion - Disables Start Menu/Start Button/sets cursor to wait.
    * Completeness - Completely disables Start Menu, Start Button,and sets
    *                cursor to wait icon.
    * Convenience - Simply disables Start Menu, Start Button,and sets cursor
    *               to wait icon.
    * Clarity - It is simple to understand that this Disables Start Menu,
    *           Start Button,and sets cursor to wait icon.
    * Consistency - It uses the same syntax rules as the rest of the class and
    *               continues to use proper casing and indentation.
    */
    public void setClientControlsToWait(){
        btnClientStart.setEnabled(false);
        startClientMenuItem.setEnabled(false);
        btnClientCancel.setEnabled(true);
        stopClientMenuItem.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    }
    /** Enables Start Menu, Start Button,and sets cursor to normal icon.
    * @TheCs Cohesion - Enables Start Menu/Start Button/sets cursor to normal.
    * Completeness - Completely enables Start Menu, Start Button,and sets
    *                cursor to normal icon.
    * Convenience - Simply enables Start Menu, Start Button,and sets cursor
    *               to normal icon.
    * Clarity - It is simple to understand that this enables Start Menu,
    *           Start Button,and sets cursor to normal icon.
    * Consistency - It uses the same syntax rules as the rest of the class and
    *               continues to use proper casing and indentation.
    */
    public void setClientControlsToActive(){
        btnClientStart.setEnabled(true);
        startClientMenuItem.setEnabled(true);
        btnClientCancel.setEnabled(false);
        stopClientMenuItem.setEnabled(false);
        setCursor(null);
        Toolkit.getDefaultToolkit().beep();
    }

    /** Disables Start Menu, Start Button,and sets cursor to wait icon.
    * @TheCs Cohesion - Disables Start Menu/Start Button/sets cursor to wait.
    * Completeness - Completely disables Start Menu, Start Button,and sets
    *                cursor to wait icon.
    * Convenience - Simply disables Start Menu, Start Button,and sets cursor
    *               to wait icon.
    * Clarity - It is simple to understand that this Disables Start Menu,
    *           Start Button,and sets cursor to wait icon.
    * Consistency - It uses the same syntax rules as the rest of the class and
    *               continues to use proper casing and indentation.
    */
    public void setServerControlsToWait(){
        btnServerStart.setEnabled(false);
        startServerMenuItem.setEnabled(false);
        btnServerStop.setEnabled(true);
        stopServerMenuItem.setEnabled(true);

    }
    /** Enables Start Menu, Start Button,and sets cursor to normal icon.
    * @TheCs Cohesion - Enables Start Menu/Start Button/sets cursor to normal.
    * Completeness - Completely enables Start Menu, Start Button,and sets
    *                cursor to normal icon.
    * Convenience - Simply enables Start Menu, Start Button,and sets cursor
    *               to normal icon.
    * Clarity - It is simple to understand that this enables Start Menu,
    *           Start Button,and sets cursor to normal icon.
    * Consistency - It uses the same syntax rules as the rest of the class and
    *               continues to use proper casing and indentation.
    */
    public void setServerControlsToActive(){
        btnServerStart.setEnabled(true);
        startServerMenuItem.setEnabled(true);
        btnServerStop.setEnabled(false);
        stopServerMenuItem.setEnabled(false);
        Toolkit.getDefaultToolkit().beep();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClientCancel;
    private javax.swing.JButton btnClientStart;
    private javax.swing.JButton btnServerStart;
    private javax.swing.JButton btnServerStop;
    private javax.swing.JPanel clientPanel;
    private javax.swing.JPanel clientPanel1;
    private javax.swing.JProgressBar clientProgressBar;
    private javax.swing.JMenuItem copyOutputMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem instructionsMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChooseFiles;
    private javax.swing.JLabel lblClientIpAddress;
    private javax.swing.JLabel lblClientPort;
    private javax.swing.JLabel lblConnectTo;
    private javax.swing.JLabel lblServerIpAddress;
    private javax.swing.JLabel lblServerOutput;
    private javax.swing.JLabel lblServerPort;
    private javax.swing.JFileChooser myFileChooser;
    private javax.swing.JMenuBar myMenuBar;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JMenuItem startClientMenuItem;
    private javax.swing.JMenuItem startServerMenuItem;
    private javax.swing.JMenuItem stopClientMenuItem;
    private javax.swing.JMenuItem stopServerMenuItem;
    private javax.swing.JTextField txtClientIpAddress;
    private javax.swing.JTextField txtClientPort;
    private javax.swing.JTextField txtServerIpAddress;
    private javax.swing.JTextArea txtServerOutput;
    private javax.swing.JTextField txtServerPort;
    // End of variables declaration//GEN-END:variables

}
